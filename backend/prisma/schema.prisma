// âœ… Connect to your DB
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// âœ… Tell Prisma to generate the client
generator client {
  provider = "prisma-client-js"
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Product[]
   attributes CategoryAttribute[] 
}


model Product {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  categoryName String
  image       String?
  index       Int?
  stock       Int                @default(0)
  status      ProductStatus      @default(SUR_COMMANDE)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  category    Category           @relation(fields: [categoryName], references: [name])
  specifications ProductSpecification[] // ðŸ‘ˆ Stores actual values
  cartItems   CartItem[]
}

model CategoryAttribute {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // e.g., RAM, CPU, Storage
  type        AttributeType // String, Number, etc.
  categoryId  String   @db.ObjectId
  category    Category @relation(fields: [categoryId], references: [id])
  specifications ProductSpecification[] // ðŸ‘ˆ Relation inverse
}

model ProductSpecification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  attributeId String @db.ObjectId
  value     String // Store as string, parse to number/etc. in code

  product   Product           @relation(fields: [productId], references: [id])
  attribute CategoryAttribute @relation(fields: [attributeId], references: [id])
}
enum AttributeType {
  STRING
  NUMBER
  BOOLEAN
  ENUM
}



enum ProductStatus {
  AVAILABLE
  SUR_COMMANDE
}
model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  isOrdered Boolean    @default(false)
  items     CartItem[] // ðŸ‘ˆ Relation inverse
  commandes  Commande[]  // ðŸ‘ˆ Optional relation to Commande
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId

  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int      @default(1)

  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}
model Commande {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   // Client name
  phoneNumber  Int   // Client phone number
  mail        String  // Client email  // Total amount of the order
  status       String @default("PENDING")    // e.g., PENDING, COMPLETED, CANCELLED
  localisation String   // Address or location
  createdAt    DateTime @default(now())

  cartId       String   @db.ObjectId
  cart         Cart     @relation(fields: [cartId], references: [id])
}
